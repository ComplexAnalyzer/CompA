type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | LSQRBR
  | RSQRBR
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | PI
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | FLOAT
  | BOOL
  | STRING
  | VOID
  | COMPLEX
  | INTLIT of (int)
  | FLOATLIT of (float)
  | ID of (string)
  | STRLIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
open Ast
# 49 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* LSQRBR *);
  264 (* RSQRBR *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* ASSIGN *);
  270 (* NOT *);
  271 (* EQ *);
  272 (* NEQ *);
  273 (* LT *);
  274 (* LEQ *);
  275 (* GT *);
  276 (* GEQ *);
  277 (* TRUE *);
  278 (* FALSE *);
  279 (* PI *);
  280 (* AND *);
  281 (* OR *);
  282 (* RETURN *);
  283 (* IF *);
  284 (* ELSE *);
  285 (* FOR *);
  286 (* WHILE *);
  287 (* INT *);
  288 (* FLOAT *);
  289 (* BOOL *);
  290 (* STRING *);
  291 (* VOID *);
  292 (* COMPLEX *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  293 (* INTLIT *);
  294 (* FLOATLIT *);
  295 (* ID *);
  296 (* STRLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\005\000\005\000\005\000\005\000\007\000\
\007\000\003\000\008\000\008\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\012\000\012\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\013\000\013\000\014\000\014\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\009\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\001\000\000\000\
\002\000\003\000\000\000\002\000\002\000\002\000\003\000\003\000\
\005\000\007\000\009\000\005\000\000\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\004\000\006\000\005\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\002\000\003\000\004\000\
\003\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\062\000\000\000\010\000\011\000\013\000\012\000\
\014\000\015\000\001\000\003\000\004\000\000\000\000\000\018\000\
\000\000\000\000\000\000\000\000\008\000\000\000\000\000\016\000\
\000\000\000\000\009\000\017\000\000\000\000\000\000\000\000\000\
\019\000\005\000\000\000\000\000\034\000\035\000\036\000\000\000\
\000\000\000\000\000\000\031\000\032\000\000\000\033\000\020\000\
\000\000\000\000\000\000\053\000\054\000\022\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\021\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\057\000\000\000\024\000\023\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\043\000\044\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\056\000\
\000\000\000\000\040\000\000\000\000\000\028\000\000\000\000\000\
\000\000\000\000\000\000\026\000\000\000\000\000\027\000"

let yydgoto = "\002\000\
\003\000\004\000\012\000\013\000\014\000\019\000\026\000\030\000\
\020\000\048\000\049\000\081\000\084\000\085\000"

let yysindex = "\014\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\219\254\090\255\000\000\
\131\255\240\254\027\255\039\255\000\000\045\255\131\255\000\000\
\012\255\131\255\000\000\000\000\014\255\085\255\057\255\219\255\
\000\000\000\000\219\255\219\255\000\000\000\000\000\000\046\255\
\064\255\069\255\076\255\000\000\000\000\048\255\000\000\000\000\
\097\000\254\000\116\255\000\000\000\000\000\000\117\000\219\255\
\219\255\219\255\219\255\219\255\219\255\000\000\219\255\219\255\
\219\255\219\255\219\255\219\255\219\255\219\255\219\255\219\255\
\219\255\219\255\000\000\219\255\000\000\000\000\016\001\087\001\
\080\255\034\001\087\001\099\255\087\255\070\001\087\001\098\255\
\098\255\000\000\000\000\001\255\001\255\053\255\053\255\053\255\
\053\255\120\001\104\001\052\001\209\255\219\255\209\255\000\000\
\219\255\088\255\000\000\089\255\137\000\000\000\087\001\219\255\
\209\255\219\255\087\001\000\000\101\255\209\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\110\255\000\000\000\000\113\255\000\000\000\000\000\000\000\000\
\000\000\147\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\118\255\000\000\125\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\255\
\000\000\000\000\003\255\000\000\128\255\000\000\097\255\057\000\
\077\000\000\000\000\000\223\000\243\000\157\000\177\000\197\000\
\217\000\051\255\071\255\000\000\000\000\000\000\000\000\000\000\
\000\000\037\000\000\000\178\255\000\000\000\000\040\255\000\000\
\000\000\130\255\126\255\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\109\000\000\000\071\000\000\000\000\000\103\000\
\000\000\160\255\224\255\026\000\000\000\000\000"

let yytablesize = 652
let yytable = "\050\000\
\011\000\015\000\052\000\053\000\108\000\060\000\110\000\055\000\
\060\000\063\000\064\000\065\000\066\000\030\000\001\000\030\000\
\116\000\069\000\070\000\071\000\072\000\119\000\021\000\079\000\
\080\000\082\000\083\000\086\000\087\000\022\000\088\000\089\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\061\000\100\000\023\000\061\000\054\000\032\000\
\024\000\059\000\027\000\051\000\031\000\051\000\060\000\035\000\
\051\000\016\000\051\000\036\000\061\000\063\000\064\000\065\000\
\066\000\056\000\037\000\038\000\039\000\109\000\057\000\052\000\
\111\000\052\000\051\000\051\000\052\000\058\000\052\000\115\000\
\102\000\080\000\044\000\045\000\046\000\047\000\032\000\018\000\
\033\000\034\000\016\000\017\000\105\000\025\000\035\000\052\000\
\029\000\055\000\036\000\055\000\112\000\104\000\055\000\118\000\
\055\000\037\000\038\000\039\000\065\000\066\000\040\000\041\000\
\006\000\042\000\043\000\007\000\113\000\032\000\029\000\033\000\
\077\000\044\000\045\000\046\000\047\000\035\000\039\000\058\000\
\039\000\036\000\059\000\039\000\029\000\039\000\028\000\051\000\
\037\000\038\000\039\000\117\000\000\000\040\000\041\000\000\000\
\042\000\043\000\000\000\000\000\019\000\000\000\019\000\019\000\
\044\000\045\000\046\000\047\000\019\000\000\000\000\000\000\000\
\019\000\005\000\006\000\007\000\008\000\009\000\010\000\019\000\
\019\000\019\000\000\000\000\000\019\000\019\000\000\000\019\000\
\019\000\000\000\000\000\025\000\000\000\025\000\025\000\019\000\
\019\000\019\000\019\000\025\000\000\000\000\000\000\000\025\000\
\000\000\000\000\000\000\000\000\000\000\000\000\025\000\025\000\
\025\000\000\000\000\000\025\000\025\000\000\000\025\000\025\000\
\000\000\000\000\032\000\000\000\033\000\000\000\025\000\025\000\
\025\000\025\000\035\000\000\000\032\000\000\000\036\000\000\000\
\000\000\000\000\000\000\000\000\035\000\037\000\038\000\039\000\
\036\000\000\000\040\000\041\000\000\000\042\000\043\000\037\000\
\038\000\039\000\000\000\000\000\000\000\044\000\045\000\046\000\
\047\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
\045\000\046\000\047\000\037\000\000\000\037\000\000\000\000\000\
\037\000\000\000\037\000\037\000\037\000\037\000\037\000\000\000\
\000\000\037\000\037\000\037\000\037\000\037\000\037\000\000\000\
\000\000\000\000\037\000\037\000\000\000\000\000\000\000\005\000\
\006\000\007\000\008\000\009\000\010\000\038\000\000\000\038\000\
\000\000\000\000\038\000\000\000\038\000\038\000\038\000\038\000\
\038\000\000\000\000\000\038\000\038\000\038\000\038\000\038\000\
\038\000\041\000\000\000\041\000\038\000\038\000\041\000\000\000\
\041\000\041\000\041\000\000\000\000\000\000\000\000\000\041\000\
\041\000\041\000\041\000\041\000\041\000\042\000\000\000\042\000\
\041\000\041\000\042\000\000\000\042\000\042\000\042\000\000\000\
\000\000\000\000\000\000\042\000\042\000\042\000\042\000\042\000\
\042\000\062\000\000\000\000\000\042\000\042\000\000\000\000\000\
\000\000\063\000\064\000\065\000\066\000\000\000\000\000\067\000\
\068\000\069\000\070\000\071\000\072\000\078\000\000\000\000\000\
\073\000\074\000\000\000\000\000\000\000\063\000\064\000\065\000\
\066\000\000\000\000\000\067\000\068\000\069\000\070\000\071\000\
\072\000\114\000\000\000\000\000\073\000\074\000\000\000\000\000\
\000\000\063\000\064\000\065\000\066\000\000\000\000\000\067\000\
\068\000\069\000\070\000\071\000\072\000\047\000\000\000\047\000\
\073\000\074\000\047\000\000\000\047\000\000\000\000\000\000\000\
\000\000\000\000\000\000\047\000\047\000\047\000\047\000\047\000\
\047\000\048\000\000\000\048\000\047\000\047\000\048\000\000\000\
\048\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\
\048\000\048\000\048\000\048\000\048\000\049\000\000\000\049\000\
\048\000\048\000\049\000\000\000\049\000\000\000\000\000\000\000\
\000\000\000\000\000\000\049\000\049\000\049\000\049\000\049\000\
\049\000\050\000\000\000\050\000\049\000\049\000\050\000\045\000\
\050\000\045\000\000\000\000\000\045\000\000\000\045\000\050\000\
\050\000\050\000\050\000\050\000\050\000\045\000\045\000\000\000\
\050\000\050\000\000\000\046\000\000\000\046\000\045\000\045\000\
\046\000\000\000\046\000\000\000\000\000\000\000\000\000\000\000\
\075\000\046\000\046\000\076\000\000\000\000\000\063\000\064\000\
\065\000\066\000\046\000\046\000\067\000\068\000\069\000\070\000\
\071\000\072\000\101\000\000\000\000\000\073\000\074\000\000\000\
\063\000\064\000\065\000\066\000\000\000\000\000\067\000\068\000\
\069\000\070\000\071\000\072\000\103\000\000\000\000\000\073\000\
\074\000\000\000\063\000\064\000\065\000\066\000\000\000\000\000\
\067\000\068\000\069\000\070\000\071\000\072\000\107\000\000\000\
\000\000\073\000\074\000\000\000\063\000\064\000\065\000\066\000\
\000\000\000\000\067\000\068\000\069\000\070\000\071\000\072\000\
\000\000\000\000\000\000\073\000\074\000\106\000\063\000\064\000\
\065\000\066\000\000\000\000\000\067\000\068\000\069\000\070\000\
\071\000\072\000\000\000\000\000\000\000\073\000\074\000\063\000\
\064\000\065\000\066\000\000\000\000\000\067\000\068\000\069\000\
\070\000\071\000\072\000\000\000\000\000\000\000\073\000\074\000\
\063\000\064\000\065\000\066\000\000\000\000\000\067\000\068\000\
\069\000\070\000\071\000\072\000\000\000\000\000\000\000\073\000\
\063\000\064\000\065\000\066\000\000\000\000\000\067\000\068\000\
\069\000\070\000\071\000\072\000"

let yycheck = "\032\000\
\000\000\039\001\035\000\036\000\101\000\003\001\103\000\040\000\
\006\001\009\001\010\001\011\001\012\001\001\001\001\000\003\001\
\113\000\017\001\018\001\019\001\020\001\118\000\039\001\056\000\
\057\000\058\000\059\000\060\000\061\000\003\001\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\003\001\076\000\006\001\006\001\001\001\002\001\
\004\001\002\001\039\001\001\001\039\001\003\001\007\001\010\001\
\006\001\001\001\008\001\014\001\013\001\009\001\010\001\011\001\
\012\001\002\001\021\001\022\001\023\001\102\000\002\001\001\001\
\105\000\003\001\024\001\025\001\006\001\002\001\008\001\112\000\
\001\001\114\000\037\001\038\001\039\001\040\001\002\001\017\000\
\004\001\005\001\001\001\002\001\006\001\023\000\010\001\025\001\
\026\000\001\001\014\001\003\001\013\001\003\001\006\001\003\001\
\008\001\021\001\022\001\023\001\011\001\012\001\026\001\027\001\
\003\001\029\001\030\001\003\001\028\001\002\001\001\001\004\001\
\005\001\037\001\038\001\039\001\040\001\010\001\001\001\003\001\
\003\001\014\001\003\001\006\001\003\001\008\001\026\000\033\000\
\021\001\022\001\023\001\114\000\255\255\026\001\027\001\255\255\
\029\001\030\001\255\255\255\255\002\001\255\255\004\001\005\001\
\037\001\038\001\039\001\040\001\010\001\255\255\255\255\255\255\
\014\001\031\001\032\001\033\001\034\001\035\001\036\001\021\001\
\022\001\023\001\255\255\255\255\026\001\027\001\255\255\029\001\
\030\001\255\255\255\255\002\001\255\255\004\001\005\001\037\001\
\038\001\039\001\040\001\010\001\255\255\255\255\255\255\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\021\001\022\001\
\023\001\255\255\255\255\026\001\027\001\255\255\029\001\030\001\
\255\255\255\255\002\001\255\255\004\001\255\255\037\001\038\001\
\039\001\040\001\010\001\255\255\002\001\255\255\014\001\255\255\
\255\255\255\255\255\255\255\255\010\001\021\001\022\001\023\001\
\014\001\255\255\026\001\027\001\255\255\029\001\030\001\021\001\
\022\001\023\001\255\255\255\255\255\255\037\001\038\001\039\001\
\040\001\255\255\255\255\255\255\255\255\255\255\255\255\037\001\
\038\001\039\001\040\001\001\001\255\255\003\001\255\255\255\255\
\006\001\255\255\008\001\009\001\010\001\011\001\012\001\255\255\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\255\255\255\255\024\001\025\001\255\255\255\255\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\001\001\255\255\003\001\
\255\255\255\255\006\001\255\255\008\001\009\001\010\001\011\001\
\012\001\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\001\001\255\255\003\001\024\001\025\001\006\001\255\255\
\008\001\009\001\010\001\255\255\255\255\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\001\001\255\255\003\001\
\024\001\025\001\006\001\255\255\008\001\009\001\010\001\255\255\
\255\255\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\001\001\255\255\255\255\024\001\025\001\255\255\255\255\
\255\255\009\001\010\001\011\001\012\001\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\001\001\255\255\255\255\
\024\001\025\001\255\255\255\255\255\255\009\001\010\001\011\001\
\012\001\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\001\001\255\255\255\255\024\001\025\001\255\255\255\255\
\255\255\009\001\010\001\011\001\012\001\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\001\001\255\255\003\001\
\024\001\025\001\006\001\255\255\008\001\255\255\255\255\255\255\
\255\255\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\001\001\255\255\003\001\024\001\025\001\006\001\255\255\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\001\001\255\255\003\001\
\024\001\025\001\006\001\255\255\008\001\255\255\255\255\255\255\
\255\255\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\001\001\255\255\003\001\024\001\025\001\006\001\001\001\
\008\001\003\001\255\255\255\255\006\001\255\255\008\001\015\001\
\016\001\017\001\018\001\019\001\020\001\015\001\016\001\255\255\
\024\001\025\001\255\255\001\001\255\255\003\001\024\001\025\001\
\006\001\255\255\008\001\255\255\255\255\255\255\255\255\255\255\
\003\001\015\001\016\001\006\001\255\255\255\255\009\001\010\001\
\011\001\012\001\024\001\025\001\015\001\016\001\017\001\018\001\
\019\001\020\001\003\001\255\255\255\255\024\001\025\001\255\255\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\003\001\255\255\255\255\024\001\
\025\001\255\255\009\001\010\001\011\001\012\001\255\255\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\003\001\255\255\
\255\255\024\001\025\001\255\255\009\001\010\001\011\001\012\001\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\255\255\024\001\025\001\008\001\009\001\010\001\
\011\001\012\001\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\255\255\024\001\025\001\009\001\
\010\001\011\001\012\001\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\255\255\255\255\024\001\025\001\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\255\255\024\001\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  LSQRBR\000\
  RSQRBR\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  PI\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  FLOAT\000\
  BOOL\000\
  STRING\000\
  VOID\000\
  COMPLEX\000\
  EOF\000\
  "

let yynames_block = "\
  INTLIT\000\
  FLOATLIT\000\
  ID\000\
  STRLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 34 "parser.mly"
            ( _1 )
# 399 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 37 "parser.mly"
                 ( [], [] )
# 405 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 38 "parser.mly"
               ( (_2 :: fst _1), snd _1 )
# 413 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 39 "parser.mly"
               ( fst _1, (_2 :: snd _1) )
# 421 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 43 "parser.mly"
     ( { typ = _1;
	 fname = _2;
	 formals = _4;
	 locals = List.rev _7;
	 body = List.rev _8 } )
# 436 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 50 "parser.mly"
                  ( [] )
# 442 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 51 "parser.mly"
                  ( List.rev _1 )
# 449 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 54 "parser.mly"
                             ( [(_1,_2)] )
# 457 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 55 "parser.mly"
                             ( (_3,_4) :: _1 )
# 466 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
        ( Int )
# 472 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
          ( Float )
# 478 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
           ( String )
# 484 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
         ( Bool )
# 490 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
         ( Void )
# 496 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
            (Complex)
# 502 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
                     ( [] )
# 508 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 67 "parser.mly"
                     ( _2 :: _1 )
# 516 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 70 "parser.mly"
               ( (_1, _2) )
# 524 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
                   ( [] )
# 530 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 74 "parser.mly"
                   ( _2 :: _1 )
# 538 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 77 "parser.mly"
              ( Expr _1 )
# 545 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
                ( Return Noexpr )
# 551 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 79 "parser.mly"
                     ( Return _2 )
# 558 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 80 "parser.mly"
                            ( Block(List.rev _2) )
# 565 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 81 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 573 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 82 "parser.mly"
                                            ( If(_3, _5, _7) )
# 582 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 84 "parser.mly"
     ( For(_3, _5, _7, _9) )
# 592 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 85 "parser.mly"
                                  ( While(_3, _5) )
# 600 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "parser.mly"
                  ( Noexpr )
# 606 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
                  ( _1 )
# 613 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 92 "parser.mly"
                     ( IntLit(_1) )
# 620 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 93 "parser.mly"
                     ( FloatLit(_1) )
# 627 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 94 "parser.mly"
                     ( StrLit(_1) )
# 634 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "parser.mly"
                     ( BoolLit(true) )
# 640 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "parser.mly"
                     ( BoolLit(false) )
# 646 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "parser.mly"
                     ( FloatLit(3.1415926535897932384626433832795) )
# 652 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 98 "parser.mly"
                     ( Id(_1) )
# 659 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                          ( ComplexAccess(_1, _3) )
# 667 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                                      ( Cxassign(_1, _3, _6) )
# 676 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                                  ( Cx(_2,_4) )
# 684 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 692 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 700 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 708 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 716 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 724 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 732 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 740 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 748 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 756 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 764 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 772 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 780 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                         ( Unop(Neg, _2) )
# 787 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                     ( Unop(Not, _2) )
# 794 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                     ( Assign(_1, _3) )
# 802 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 117 "parser.mly"
                                 ( Call(_1, _3) )
# 810 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                       ( _2 )
# 817 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 121 "parser.mly"
                  ( [] )
# 823 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 122 "parser.mly"
                  ( List.rev _1 )
# 830 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                            ( [_1] )
# 837 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                            ( _3 :: _1 )
# 845 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
