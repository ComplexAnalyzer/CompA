type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | LSQRBR
  | RSQRBR
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | FLOAT
  | BOOL
  | STRING
  | VOID
  | COMPLEX
  | INTLIT of (int)
  | FLOATLIT of (float)
  | ID of (string)
  | STRLIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
open Ast
# 48 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* LSQRBR *);
  264 (* RSQRBR *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* ASSIGN *);
  270 (* NOT *);
  271 (* EQ *);
  272 (* NEQ *);
  273 (* LT *);
  274 (* LEQ *);
  275 (* GT *);
  276 (* GEQ *);
  277 (* TRUE *);
  278 (* FALSE *);
  279 (* AND *);
  280 (* OR *);
  281 (* RETURN *);
  282 (* IF *);
  283 (* ELSE *);
  284 (* FOR *);
  285 (* WHILE *);
  286 (* INT *);
  287 (* FLOAT *);
  288 (* BOOL *);
  289 (* STRING *);
  290 (* VOID *);
  291 (* COMPLEX *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  292 (* INTLIT *);
  293 (* FLOATLIT *);
  294 (* ID *);
  295 (* STRLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\005\000\005\000\005\000\005\000\007\000\
\007\000\003\000\008\000\008\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\012\000\012\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\013\000\013\000\
\014\000\014\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\009\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\001\000\000\000\
\002\000\003\000\000\000\002\000\002\000\002\000\003\000\003\000\
\005\000\007\000\009\000\005\000\000\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\005\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\003\000\004\000\003\000\000\000\001\000\
\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\059\000\000\000\010\000\011\000\013\000\012\000\
\014\000\015\000\001\000\003\000\004\000\000\000\000\000\018\000\
\000\000\000\000\000\000\000\000\008\000\000\000\000\000\016\000\
\000\000\000\000\009\000\017\000\000\000\000\000\000\000\000\000\
\019\000\005\000\000\000\000\000\034\000\035\000\000\000\000\000\
\000\000\000\000\031\000\032\000\000\000\033\000\020\000\000\000\
\000\000\000\000\050\000\051\000\022\000\000\000\000\000\000\000\
\000\000\000\000\000\000\021\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\054\000\000\000\024\000\023\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\040\000\041\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\053\000\000\000\037\000\000\000\
\000\000\028\000\000\000\000\000\000\000\026\000\000\000\000\000\
\027\000"

let yydgoto = "\002\000\
\003\000\004\000\012\000\013\000\014\000\019\000\026\000\030\000\
\020\000\047\000\048\000\079\000\082\000\083\000"

let yysindex = "\011\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\246\254\004\255\000\000\
\155\255\007\255\046\255\048\255\000\000\061\255\155\255\000\000\
\028\255\155\255\000\000\000\000\049\255\080\255\082\255\089\255\
\000\000\000\000\089\255\089\255\000\000\000\000\042\255\091\255\
\095\255\102\255\000\000\000\000\000\255\000\000\000\000\003\000\
\214\000\110\255\000\000\000\000\000\000\028\000\089\255\089\255\
\089\255\089\255\089\255\000\000\089\255\089\255\089\255\089\255\
\089\255\089\255\089\255\089\255\089\255\089\255\089\255\089\255\
\000\000\089\255\000\000\000\000\232\000\028\001\106\255\250\000\
\028\001\119\255\107\255\028\001\009\255\009\255\000\000\000\000\
\056\001\056\001\062\255\062\255\062\255\062\255\044\001\255\254\
\012\001\200\255\089\255\200\255\000\000\089\255\000\000\103\255\
\048\000\000\000\028\001\200\255\089\255\000\000\126\255\200\255\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\130\255\000\000\000\000\131\255\000\000\000\000\000\000\000\000\
\000\000\140\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\239\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136\255\
\000\000\137\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\120\255\000\000\000\000\
\086\255\000\000\138\255\056\255\072\000\096\000\000\000\000\000\
\045\255\198\000\120\000\144\000\168\000\192\000\052\255\157\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\170\255\
\000\000\000\000\092\255\000\000\148\255\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\000\000\117\000\000\000\024\000\000\000\000\000\119\000\
\000\000\244\255\224\255\044\000\000\000\000\000"

let yytablesize = 588
let yytable = "\049\000\
\011\000\058\000\051\000\052\000\016\000\017\000\054\000\061\000\
\062\000\063\000\064\000\001\000\059\000\065\000\066\000\067\000\
\068\000\069\000\070\000\063\000\064\000\071\000\077\000\078\000\
\080\000\081\000\084\000\015\000\085\000\086\000\087\000\088\000\
\089\000\090\000\091\000\092\000\093\000\094\000\095\000\096\000\
\018\000\097\000\053\000\032\000\021\000\042\000\025\000\042\000\
\022\000\029\000\042\000\035\000\048\000\023\000\048\000\036\000\
\052\000\048\000\052\000\042\000\042\000\052\000\037\000\038\000\
\024\000\027\000\105\000\042\000\042\000\107\000\061\000\062\000\
\063\000\064\000\048\000\048\000\078\000\043\000\044\000\045\000\
\046\000\032\000\016\000\033\000\034\000\104\000\031\000\106\000\
\057\000\035\000\032\000\057\000\055\000\036\000\058\000\110\000\
\056\000\058\000\035\000\113\000\037\000\038\000\036\000\057\000\
\039\000\040\000\099\000\041\000\042\000\037\000\038\000\032\000\
\102\000\033\000\075\000\043\000\044\000\045\000\046\000\035\000\
\030\000\101\000\030\000\036\000\043\000\044\000\045\000\046\000\
\112\000\108\000\037\000\038\000\006\000\007\000\039\000\040\000\
\029\000\041\000\042\000\055\000\056\000\019\000\028\000\019\000\
\019\000\043\000\044\000\045\000\046\000\019\000\029\000\050\000\
\111\000\019\000\000\000\000\000\000\000\049\000\000\000\049\000\
\019\000\019\000\049\000\000\000\019\000\019\000\000\000\019\000\
\019\000\000\000\000\000\025\000\000\000\025\000\025\000\019\000\
\019\000\019\000\019\000\025\000\049\000\000\000\000\000\025\000\
\005\000\006\000\007\000\008\000\009\000\010\000\025\000\025\000\
\000\000\000\000\025\000\025\000\000\000\025\000\025\000\000\000\
\000\000\032\000\000\000\033\000\000\000\025\000\025\000\025\000\
\025\000\035\000\000\000\000\000\000\000\036\000\000\000\000\000\
\000\000\000\000\000\000\000\000\037\000\038\000\000\000\000\000\
\039\000\040\000\000\000\041\000\042\000\000\000\000\000\000\000\
\000\000\000\000\000\000\043\000\044\000\045\000\046\000\036\000\
\000\000\036\000\000\000\000\000\036\000\000\000\000\000\036\000\
\036\000\036\000\036\000\000\000\000\000\036\000\036\000\036\000\
\036\000\036\000\036\000\060\000\000\000\036\000\036\000\000\000\
\000\000\000\000\000\000\061\000\062\000\063\000\064\000\000\000\
\000\000\065\000\066\000\067\000\068\000\069\000\070\000\000\000\
\000\000\071\000\072\000\000\000\076\000\000\000\005\000\006\000\
\007\000\008\000\009\000\010\000\061\000\062\000\063\000\064\000\
\000\000\000\000\065\000\066\000\067\000\068\000\069\000\070\000\
\109\000\000\000\071\000\072\000\000\000\000\000\000\000\000\000\
\061\000\062\000\063\000\064\000\000\000\000\000\065\000\066\000\
\067\000\068\000\069\000\070\000\000\000\000\000\071\000\072\000\
\038\000\000\000\038\000\000\000\000\000\038\000\000\000\000\000\
\038\000\038\000\000\000\000\000\000\000\000\000\038\000\038\000\
\038\000\038\000\038\000\038\000\000\000\000\000\038\000\038\000\
\039\000\000\000\039\000\000\000\000\000\039\000\000\000\000\000\
\039\000\039\000\000\000\000\000\000\000\000\000\039\000\039\000\
\039\000\039\000\039\000\039\000\000\000\000\000\039\000\039\000\
\044\000\000\000\044\000\000\000\000\000\044\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\044\000\044\000\
\044\000\044\000\044\000\044\000\000\000\000\000\044\000\044\000\
\045\000\000\000\045\000\000\000\000\000\045\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\045\000\045\000\
\045\000\045\000\045\000\045\000\000\000\000\000\045\000\045\000\
\046\000\000\000\046\000\000\000\000\000\046\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\046\000\046\000\
\046\000\046\000\046\000\046\000\000\000\000\000\046\000\046\000\
\047\000\000\000\047\000\000\000\000\000\047\000\043\000\000\000\
\043\000\000\000\000\000\043\000\000\000\000\000\047\000\047\000\
\047\000\047\000\047\000\047\000\043\000\043\000\047\000\047\000\
\073\000\000\000\000\000\074\000\043\000\043\000\061\000\062\000\
\063\000\064\000\000\000\000\000\065\000\066\000\067\000\068\000\
\069\000\070\000\098\000\000\000\071\000\072\000\000\000\000\000\
\061\000\062\000\063\000\064\000\000\000\000\000\065\000\066\000\
\067\000\068\000\069\000\070\000\100\000\000\000\071\000\072\000\
\000\000\000\000\061\000\062\000\063\000\064\000\000\000\000\000\
\065\000\066\000\067\000\068\000\069\000\070\000\103\000\000\000\
\071\000\072\000\000\000\000\000\061\000\062\000\063\000\064\000\
\000\000\000\000\065\000\066\000\067\000\068\000\069\000\070\000\
\000\000\000\000\071\000\072\000\061\000\062\000\063\000\064\000\
\000\000\000\000\065\000\066\000\067\000\068\000\069\000\070\000\
\000\000\000\000\071\000\072\000\061\000\062\000\063\000\064\000\
\000\000\000\000\065\000\066\000\067\000\068\000\069\000\070\000\
\061\000\062\000\063\000\064\000\000\000\000\000\000\000\000\000\
\067\000\068\000\069\000\070\000"

let yycheck = "\032\000\
\000\000\002\001\035\000\036\000\001\001\002\001\039\000\009\001\
\010\001\011\001\012\001\001\000\013\001\015\001\016\001\017\001\
\018\001\019\001\020\001\011\001\012\001\023\001\055\000\056\000\
\057\000\058\000\059\000\038\001\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\017\000\074\000\001\001\002\001\038\001\001\001\023\000\003\001\
\003\001\026\000\006\001\010\001\001\001\006\001\003\001\014\001\
\001\001\006\001\003\001\015\001\016\001\006\001\021\001\022\001\
\004\001\038\001\099\000\023\001\024\001\102\000\009\001\010\001\
\011\001\012\001\023\001\024\001\109\000\036\001\037\001\038\001\
\039\001\002\001\001\001\004\001\005\001\098\000\038\001\100\000\
\003\001\010\001\002\001\006\001\002\001\014\001\003\001\108\000\
\002\001\006\001\010\001\112\000\021\001\022\001\014\001\002\001\
\025\001\026\001\001\001\028\001\029\001\021\001\022\001\002\001\
\006\001\004\001\005\001\036\001\037\001\038\001\039\001\010\001\
\001\001\003\001\003\001\014\001\036\001\037\001\038\001\039\001\
\003\001\027\001\021\001\022\001\003\001\003\001\025\001\026\001\
\001\001\028\001\029\001\003\001\003\001\002\001\026\000\004\001\
\005\001\036\001\037\001\038\001\039\001\010\001\003\001\033\000\
\109\000\014\001\255\255\255\255\255\255\001\001\255\255\003\001\
\021\001\022\001\006\001\255\255\025\001\026\001\255\255\028\001\
\029\001\255\255\255\255\002\001\255\255\004\001\005\001\036\001\
\037\001\038\001\039\001\010\001\024\001\255\255\255\255\014\001\
\030\001\031\001\032\001\033\001\034\001\035\001\021\001\022\001\
\255\255\255\255\025\001\026\001\255\255\028\001\029\001\255\255\
\255\255\002\001\255\255\004\001\255\255\036\001\037\001\038\001\
\039\001\010\001\255\255\255\255\255\255\014\001\255\255\255\255\
\255\255\255\255\255\255\255\255\021\001\022\001\255\255\255\255\
\025\001\026\001\255\255\028\001\029\001\255\255\255\255\255\255\
\255\255\255\255\255\255\036\001\037\001\038\001\039\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\255\255\009\001\
\010\001\011\001\012\001\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\001\001\255\255\023\001\024\001\255\255\
\255\255\255\255\255\255\009\001\010\001\011\001\012\001\255\255\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\255\255\023\001\024\001\255\255\001\001\255\255\030\001\031\001\
\032\001\033\001\034\001\035\001\009\001\010\001\011\001\012\001\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\001\001\255\255\023\001\024\001\255\255\255\255\255\255\255\255\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\023\001\024\001\
\001\001\255\255\003\001\255\255\255\255\006\001\255\255\255\255\
\009\001\010\001\255\255\255\255\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\023\001\024\001\
\001\001\255\255\003\001\255\255\255\255\006\001\255\255\255\255\
\009\001\010\001\255\255\255\255\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\023\001\024\001\
\001\001\255\255\003\001\255\255\255\255\006\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\023\001\024\001\
\001\001\255\255\003\001\255\255\255\255\006\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\023\001\024\001\
\001\001\255\255\003\001\255\255\255\255\006\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\023\001\024\001\
\001\001\255\255\003\001\255\255\255\255\006\001\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\015\001\016\001\023\001\024\001\
\003\001\255\255\255\255\006\001\023\001\024\001\009\001\010\001\
\011\001\012\001\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\003\001\255\255\023\001\024\001\255\255\255\255\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\003\001\255\255\023\001\024\001\
\255\255\255\255\009\001\010\001\011\001\012\001\255\255\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\003\001\255\255\
\023\001\024\001\255\255\255\255\009\001\010\001\011\001\012\001\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\023\001\024\001\009\001\010\001\011\001\012\001\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\023\001\024\001\009\001\010\001\011\001\012\001\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\009\001\010\001\011\001\012\001\255\255\255\255\255\255\255\255\
\017\001\018\001\019\001\020\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  LSQRBR\000\
  RSQRBR\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  FLOAT\000\
  BOOL\000\
  STRING\000\
  VOID\000\
  COMPLEX\000\
  EOF\000\
  "

let yynames_block = "\
  INTLIT\000\
  FLOATLIT\000\
  ID\000\
  STRLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 34 "parser.mly"
            ( _1 )
# 380 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 37 "parser.mly"
                 ( [], [] )
# 386 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 38 "parser.mly"
               ( (_2 :: fst _1), snd _1 )
# 394 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 39 "parser.mly"
               ( fst _1, (_2 :: snd _1) )
# 402 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 43 "parser.mly"
     ( { typ = _1;
	 fname = _2;
	 formals = _4;
	 locals = List.rev _7;
	 body = List.rev _8 } )
# 417 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 50 "parser.mly"
                  ( [] )
# 423 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 51 "parser.mly"
                  ( List.rev _1 )
# 430 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 54 "parser.mly"
                             ( [(_1,_2)] )
# 438 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 55 "parser.mly"
                             ( (_3,_4) :: _1 )
# 447 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
        ( Int )
# 453 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
          ( Float )
# 459 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
           ( String )
# 465 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
         ( Bool )
# 471 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
         ( Void )
# 477 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
            (Complex)
# 483 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
                     ( [] )
# 489 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 67 "parser.mly"
                     ( _2 :: _1 )
# 497 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 70 "parser.mly"
               ( (_1, _2) )
# 505 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
                   ( [] )
# 511 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 74 "parser.mly"
                   ( _2 :: _1 )
# 519 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 77 "parser.mly"
              ( Expr _1 )
# 526 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
                ( Return Noexpr )
# 532 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 79 "parser.mly"
                     ( Return _2 )
# 539 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 80 "parser.mly"
                            ( Block(List.rev _2) )
# 546 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 81 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 554 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 82 "parser.mly"
                                            ( If(_3, _5, _7) )
# 563 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 84 "parser.mly"
     ( For(_3, _5, _7, _9) )
# 573 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 85 "parser.mly"
                                  ( While(_3, _5) )
# 581 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "parser.mly"
                  ( Noexpr )
# 587 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
                  ( _1 )
# 594 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 92 "parser.mly"
                     ( IntLit(_1) )
# 601 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 93 "parser.mly"
                     ( FloatLit(_1) )
# 608 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 94 "parser.mly"
                     ( StrLit(_1) )
# 615 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "parser.mly"
                     ( BoolLit(true) )
# 621 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "parser.mly"
                     ( BoolLit(false) )
# 627 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 97 "parser.mly"
                     ( Id(_1) )
# 634 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                                  ( Cx(_2,_4) )
# 642 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 650 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 658 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 666 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 674 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 682 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 690 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 698 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 706 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 714 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 722 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 730 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 738 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                         ( Unop(Neg, _2) )
# 745 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                     ( Unop(Not, _2) )
# 752 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                     ( Assign(_1, _3) )
# 760 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 114 "parser.mly"
                                 ( Call(_1, _3) )
# 768 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                       ( _2 )
# 775 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 118 "parser.mly"
                  ( [] )
# 781 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 119 "parser.mly"
                  ( List.rev _1 )
# 788 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                            ( [_1] )
# 795 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                            ( _3 :: _1 )
# 803 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
