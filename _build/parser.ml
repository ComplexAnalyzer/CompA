type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | LSQRBR
  | RSQRBR
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | FLOAT
  | BOOL
  | STRING
  | VOID
  | COMPLEX
  | INTLIT of (int)
  | FLOATLIT of (float)
  | ID of (string)
  | STRLIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
open Ast
# 48 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* LSQRBR *);
  264 (* RSQRBR *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* ASSIGN *);
  270 (* NOT *);
  271 (* EQ *);
  272 (* NEQ *);
  273 (* LT *);
  274 (* LEQ *);
  275 (* GT *);
  276 (* GEQ *);
  277 (* TRUE *);
  278 (* FALSE *);
  279 (* AND *);
  280 (* OR *);
  281 (* RETURN *);
  282 (* IF *);
  283 (* ELSE *);
  284 (* FOR *);
  285 (* WHILE *);
  286 (* INT *);
  287 (* FLOAT *);
  288 (* BOOL *);
  289 (* STRING *);
  290 (* VOID *);
  291 (* COMPLEX *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  292 (* INTLIT *);
  293 (* FLOATLIT *);
  294 (* ID *);
  295 (* STRLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\005\000\005\000\005\000\005\000\007\000\
\007\000\003\000\008\000\008\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\012\000\012\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\013\000\013\000\014\000\014\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\009\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\001\000\000\000\
\002\000\003\000\000\000\002\000\002\000\002\000\003\000\003\000\
\005\000\007\000\009\000\005\000\000\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\004\000\006\000\005\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\002\000\003\000\004\000\003\000\
\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\061\000\000\000\010\000\011\000\013\000\012\000\
\014\000\015\000\001\000\003\000\004\000\000\000\000\000\018\000\
\000\000\000\000\000\000\000\000\008\000\000\000\000\000\016\000\
\000\000\000\000\009\000\017\000\000\000\000\000\000\000\000\000\
\019\000\005\000\000\000\000\000\034\000\035\000\000\000\000\000\
\000\000\000\000\031\000\032\000\000\000\033\000\020\000\000\000\
\000\000\000\000\052\000\053\000\022\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\056\000\000\000\024\000\023\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\042\000\043\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\055\000\000\000\
\000\000\039\000\000\000\000\000\028\000\000\000\000\000\000\000\
\000\000\000\000\026\000\000\000\000\000\027\000"

let yydgoto = "\002\000\
\003\000\004\000\012\000\013\000\014\000\019\000\026\000\030\000\
\020\000\047\000\048\000\080\000\083\000\084\000"

let yysindex = "\020\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\220\254\089\255\000\000\
\129\255\006\255\043\255\049\255\000\000\054\255\129\255\000\000\
\032\255\129\255\000\000\000\000\042\255\084\255\076\255\093\255\
\000\000\000\000\093\255\093\255\000\000\000\000\046\255\085\255\
\094\255\095\255\000\000\000\000\003\255\000\000\000\000\104\000\
\006\000\114\255\000\000\000\000\000\000\124\000\093\255\093\255\
\093\255\093\255\093\255\093\255\000\000\093\255\093\255\093\255\
\093\255\093\255\093\255\093\255\093\255\093\255\093\255\093\255\
\093\255\000\000\093\255\000\000\000\000\019\001\088\001\098\255\
\037\001\088\001\097\255\096\255\072\001\088\001\081\255\081\255\
\000\000\000\000\131\001\131\001\053\255\053\255\053\255\053\255\
\119\001\104\001\055\001\204\255\093\255\204\255\000\000\093\255\
\088\255\000\000\077\255\144\000\000\000\088\001\093\255\204\255\
\093\255\088\001\000\000\105\255\204\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\108\255\000\000\000\000\122\255\000\000\000\000\000\000\000\000\
\000\000\144\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\243\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\116\255\
\000\000\123\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\019\255\000\000\
\000\000\039\255\000\000\124\255\000\000\011\255\060\000\084\000\
\000\000\000\000\246\000\009\001\168\000\192\000\216\000\240\000\
\051\255\005\255\000\000\000\000\000\000\000\000\000\000\000\000\
\036\000\000\000\174\255\000\000\000\000\047\255\000\000\000\000\
\130\255\070\255\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\108\000\000\000\248\255\000\000\000\000\105\000\
\000\000\205\255\224\255\024\000\000\000\000\000"

let yytablesize = 663
let yytable = "\049\000\
\011\000\015\000\051\000\052\000\058\000\051\000\054\000\051\000\
\018\000\059\000\051\000\054\000\051\000\054\000\025\000\060\000\
\054\000\029\000\054\000\030\000\001\000\030\000\078\000\079\000\
\081\000\082\000\085\000\086\000\051\000\087\000\088\000\089\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\098\000\059\000\099\000\021\000\059\000\022\000\053\000\032\000\
\107\000\060\000\109\000\050\000\060\000\050\000\023\000\035\000\
\050\000\024\000\050\000\036\000\115\000\062\000\063\000\064\000\
\065\000\118\000\037\000\038\000\108\000\027\000\038\000\110\000\
\038\000\050\000\050\000\038\000\016\000\038\000\114\000\031\000\
\079\000\043\000\044\000\045\000\046\000\032\000\055\000\033\000\
\034\000\016\000\017\000\064\000\065\000\035\000\032\000\056\000\
\057\000\036\000\101\000\103\000\111\000\104\000\035\000\112\000\
\037\000\038\000\036\000\117\000\039\000\040\000\006\000\041\000\
\042\000\037\000\038\000\032\000\029\000\033\000\076\000\043\000\
\044\000\045\000\046\000\035\000\007\000\057\000\058\000\036\000\
\043\000\044\000\045\000\046\000\029\000\028\000\037\000\038\000\
\116\000\050\000\039\000\040\000\000\000\041\000\042\000\000\000\
\000\000\019\000\000\000\019\000\019\000\043\000\044\000\045\000\
\046\000\019\000\000\000\000\000\000\000\019\000\005\000\006\000\
\007\000\008\000\009\000\010\000\019\000\019\000\000\000\000\000\
\019\000\019\000\000\000\019\000\019\000\000\000\000\000\025\000\
\000\000\025\000\025\000\019\000\019\000\019\000\019\000\025\000\
\000\000\000\000\000\000\025\000\000\000\000\000\000\000\000\000\
\000\000\000\000\025\000\025\000\000\000\000\000\025\000\025\000\
\000\000\025\000\025\000\000\000\000\000\032\000\000\000\033\000\
\000\000\025\000\025\000\025\000\025\000\035\000\000\000\000\000\
\000\000\036\000\000\000\000\000\000\000\000\000\000\000\000\000\
\037\000\038\000\000\000\000\000\039\000\040\000\000\000\041\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\043\000\
\044\000\045\000\046\000\036\000\000\000\036\000\000\000\000\000\
\036\000\000\000\036\000\036\000\036\000\036\000\036\000\000\000\
\000\000\036\000\036\000\036\000\036\000\036\000\036\000\000\000\
\074\000\036\000\036\000\075\000\000\000\000\000\062\000\063\000\
\064\000\065\000\000\000\000\000\066\000\067\000\068\000\069\000\
\070\000\071\000\000\000\000\000\072\000\073\000\005\000\006\000\
\007\000\008\000\009\000\010\000\037\000\000\000\037\000\000\000\
\000\000\037\000\000\000\037\000\037\000\037\000\037\000\037\000\
\000\000\000\000\037\000\037\000\037\000\037\000\037\000\037\000\
\000\000\000\000\037\000\037\000\040\000\000\000\040\000\000\000\
\000\000\040\000\000\000\040\000\040\000\040\000\000\000\000\000\
\000\000\000\000\040\000\040\000\040\000\040\000\040\000\040\000\
\000\000\000\000\040\000\040\000\041\000\000\000\041\000\000\000\
\000\000\041\000\000\000\041\000\041\000\041\000\000\000\000\000\
\000\000\000\000\041\000\041\000\041\000\041\000\041\000\041\000\
\061\000\000\000\041\000\041\000\000\000\000\000\000\000\000\000\
\062\000\063\000\064\000\065\000\000\000\000\000\066\000\067\000\
\068\000\069\000\070\000\071\000\077\000\000\000\072\000\073\000\
\000\000\000\000\000\000\000\000\062\000\063\000\064\000\065\000\
\000\000\000\000\066\000\067\000\068\000\069\000\070\000\071\000\
\113\000\000\000\072\000\073\000\000\000\000\000\000\000\000\000\
\062\000\063\000\064\000\065\000\000\000\000\000\066\000\067\000\
\068\000\069\000\070\000\071\000\000\000\000\000\072\000\073\000\
\046\000\000\000\046\000\000\000\000\000\046\000\000\000\046\000\
\000\000\000\000\000\000\000\000\000\000\000\000\046\000\046\000\
\046\000\046\000\046\000\046\000\000\000\000\000\046\000\046\000\
\047\000\000\000\047\000\000\000\000\000\047\000\000\000\047\000\
\000\000\000\000\000\000\000\000\000\000\000\000\047\000\047\000\
\047\000\047\000\047\000\047\000\000\000\000\000\047\000\047\000\
\048\000\000\000\048\000\000\000\000\000\048\000\000\000\048\000\
\000\000\000\000\000\000\000\000\000\000\000\000\048\000\048\000\
\048\000\048\000\048\000\048\000\000\000\000\000\048\000\048\000\
\049\000\000\000\049\000\000\000\000\000\049\000\044\000\049\000\
\044\000\000\000\000\000\044\000\000\000\044\000\049\000\049\000\
\049\000\049\000\049\000\049\000\044\000\044\000\049\000\049\000\
\000\000\045\000\000\000\045\000\044\000\044\000\045\000\000\000\
\045\000\000\000\000\000\000\000\000\000\100\000\000\000\045\000\
\045\000\000\000\000\000\062\000\063\000\064\000\065\000\045\000\
\045\000\066\000\067\000\068\000\069\000\070\000\071\000\102\000\
\000\000\072\000\073\000\000\000\000\000\062\000\063\000\064\000\
\065\000\000\000\000\000\066\000\067\000\068\000\069\000\070\000\
\071\000\106\000\000\000\072\000\073\000\000\000\000\000\062\000\
\063\000\064\000\065\000\000\000\000\000\066\000\067\000\068\000\
\069\000\070\000\071\000\000\000\000\000\072\000\073\000\105\000\
\062\000\063\000\064\000\065\000\000\000\000\000\066\000\067\000\
\068\000\069\000\070\000\071\000\000\000\000\000\072\000\073\000\
\062\000\063\000\064\000\065\000\000\000\000\000\066\000\067\000\
\068\000\069\000\070\000\071\000\000\000\000\000\072\000\073\000\
\062\000\063\000\064\000\065\000\000\000\000\000\066\000\067\000\
\068\000\069\000\070\000\071\000\000\000\000\000\072\000\062\000\
\063\000\064\000\065\000\000\000\000\000\066\000\067\000\068\000\
\069\000\070\000\071\000\062\000\063\000\064\000\065\000\000\000\
\000\000\000\000\000\000\068\000\069\000\070\000\071\000"

let yycheck = "\032\000\
\000\000\038\001\035\000\036\000\002\001\001\001\039\000\003\001\
\017\000\007\001\006\001\001\001\008\001\003\001\023\000\013\001\
\006\001\026\000\008\001\001\001\001\000\003\001\055\000\056\000\
\057\000\058\000\059\000\060\000\024\001\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\003\001\075\000\038\001\006\001\003\001\001\001\002\001\
\100\000\003\001\102\000\001\001\006\001\003\001\006\001\010\001\
\006\001\004\001\008\001\014\001\112\000\009\001\010\001\011\001\
\012\001\117\000\021\001\022\001\101\000\038\001\001\001\104\000\
\003\001\023\001\024\001\006\001\001\001\008\001\111\000\038\001\
\113\000\036\001\037\001\038\001\039\001\002\001\002\001\004\001\
\005\001\001\001\002\001\011\001\012\001\010\001\002\001\002\001\
\002\001\014\001\001\001\003\001\013\001\006\001\010\001\027\001\
\021\001\022\001\014\001\003\001\025\001\026\001\003\001\028\001\
\029\001\021\001\022\001\002\001\001\001\004\001\005\001\036\001\
\037\001\038\001\039\001\010\001\003\001\003\001\003\001\014\001\
\036\001\037\001\038\001\039\001\003\001\026\000\021\001\022\001\
\113\000\033\000\025\001\026\001\255\255\028\001\029\001\255\255\
\255\255\002\001\255\255\004\001\005\001\036\001\037\001\038\001\
\039\001\010\001\255\255\255\255\255\255\014\001\030\001\031\001\
\032\001\033\001\034\001\035\001\021\001\022\001\255\255\255\255\
\025\001\026\001\255\255\028\001\029\001\255\255\255\255\002\001\
\255\255\004\001\005\001\036\001\037\001\038\001\039\001\010\001\
\255\255\255\255\255\255\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\021\001\022\001\255\255\255\255\025\001\026\001\
\255\255\028\001\029\001\255\255\255\255\002\001\255\255\004\001\
\255\255\036\001\037\001\038\001\039\001\010\001\255\255\255\255\
\255\255\014\001\255\255\255\255\255\255\255\255\255\255\255\255\
\021\001\022\001\255\255\255\255\025\001\026\001\255\255\028\001\
\029\001\255\255\255\255\255\255\255\255\255\255\255\255\036\001\
\037\001\038\001\039\001\001\001\255\255\003\001\255\255\255\255\
\006\001\255\255\008\001\009\001\010\001\011\001\012\001\255\255\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\003\001\023\001\024\001\006\001\255\255\255\255\009\001\010\001\
\011\001\012\001\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\030\001\031\001\
\032\001\033\001\034\001\035\001\001\001\255\255\003\001\255\255\
\255\255\006\001\255\255\008\001\009\001\010\001\011\001\012\001\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\023\001\024\001\001\001\255\255\003\001\255\255\
\255\255\006\001\255\255\008\001\009\001\010\001\255\255\255\255\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\023\001\024\001\001\001\255\255\003\001\255\255\
\255\255\006\001\255\255\008\001\009\001\010\001\255\255\255\255\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\001\001\255\255\023\001\024\001\255\255\255\255\255\255\255\255\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\001\001\255\255\023\001\024\001\
\255\255\255\255\255\255\255\255\009\001\010\001\011\001\012\001\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\001\001\255\255\023\001\024\001\255\255\255\255\255\255\255\255\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\023\001\024\001\
\001\001\255\255\003\001\255\255\255\255\006\001\255\255\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\023\001\024\001\
\001\001\255\255\003\001\255\255\255\255\006\001\255\255\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\023\001\024\001\
\001\001\255\255\003\001\255\255\255\255\006\001\255\255\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\023\001\024\001\
\001\001\255\255\003\001\255\255\255\255\006\001\001\001\008\001\
\003\001\255\255\255\255\006\001\255\255\008\001\015\001\016\001\
\017\001\018\001\019\001\020\001\015\001\016\001\023\001\024\001\
\255\255\001\001\255\255\003\001\023\001\024\001\006\001\255\255\
\008\001\255\255\255\255\255\255\255\255\003\001\255\255\015\001\
\016\001\255\255\255\255\009\001\010\001\011\001\012\001\023\001\
\024\001\015\001\016\001\017\001\018\001\019\001\020\001\003\001\
\255\255\023\001\024\001\255\255\255\255\009\001\010\001\011\001\
\012\001\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\003\001\255\255\023\001\024\001\255\255\255\255\009\001\
\010\001\011\001\012\001\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\255\255\023\001\024\001\008\001\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\023\001\024\001\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\023\001\024\001\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\023\001\009\001\
\010\001\011\001\012\001\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\009\001\010\001\011\001\012\001\255\255\
\255\255\255\255\255\255\017\001\018\001\019\001\020\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  LSQRBR\000\
  RSQRBR\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  FLOAT\000\
  BOOL\000\
  STRING\000\
  VOID\000\
  COMPLEX\000\
  EOF\000\
  "

let yynames_block = "\
  INTLIT\000\
  FLOATLIT\000\
  ID\000\
  STRLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 34 "parser.mly"
            ( _1 )
# 398 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 37 "parser.mly"
                 ( [], [] )
# 404 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 38 "parser.mly"
               ( (_2 :: fst _1), snd _1 )
# 412 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 39 "parser.mly"
               ( fst _1, (_2 :: snd _1) )
# 420 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 43 "parser.mly"
     ( { typ = _1;
	 fname = _2;
	 formals = _4;
	 locals = List.rev _7;
	 body = List.rev _8 } )
# 435 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 50 "parser.mly"
                  ( [] )
# 441 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 51 "parser.mly"
                  ( List.rev _1 )
# 448 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 54 "parser.mly"
                             ( [(_1,_2)] )
# 456 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 55 "parser.mly"
                             ( (_3,_4) :: _1 )
# 465 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
        ( Int )
# 471 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
          ( Float )
# 477 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
           ( String )
# 483 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
         ( Bool )
# 489 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
         ( Void )
# 495 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
            (Complex)
# 501 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
                     ( [] )
# 507 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 67 "parser.mly"
                     ( _2 :: _1 )
# 515 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 70 "parser.mly"
               ( (_1, _2) )
# 523 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
                   ( [] )
# 529 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 74 "parser.mly"
                   ( _2 :: _1 )
# 537 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 77 "parser.mly"
              ( Expr _1 )
# 544 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
                ( Return Noexpr )
# 550 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 79 "parser.mly"
                     ( Return _2 )
# 557 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 80 "parser.mly"
                            ( Block(List.rev _2) )
# 564 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 81 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 572 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 82 "parser.mly"
                                            ( If(_3, _5, _7) )
# 581 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 84 "parser.mly"
     ( For(_3, _5, _7, _9) )
# 591 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 85 "parser.mly"
                                  ( While(_3, _5) )
# 599 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "parser.mly"
                  ( Noexpr )
# 605 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
                  ( _1 )
# 612 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 92 "parser.mly"
                     ( IntLit(_1) )
# 619 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 93 "parser.mly"
                     ( FloatLit(_1) )
# 626 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 94 "parser.mly"
                     ( StrLit(_1) )
# 633 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "parser.mly"
                     ( BoolLit(true) )
# 639 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "parser.mly"
                     ( BoolLit(false) )
# 645 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 97 "parser.mly"
                     ( Id(_1) )
# 652 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                          ( ComplexAccess(_1, _3) )
# 660 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                                      ( Cxassign(_1, _3, _6) )
# 669 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                                  ( Cx(_2,_4) )
# 677 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 685 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 693 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 701 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 709 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 717 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 725 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 733 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 741 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 749 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 757 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 765 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 773 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                         ( Unop(Neg, _2) )
# 780 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                     ( Unop(Not, _2) )
# 787 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                     ( Assign(_1, _3) )
# 795 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 116 "parser.mly"
                                 ( Call(_1, _3) )
# 803 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                       ( _2 )
# 810 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 120 "parser.mly"
                  ( [] )
# 816 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 121 "parser.mly"
                  ( List.rev _1 )
# 823 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                            ( [_1] )
# 830 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                            ( _3 :: _1 )
# 838 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
